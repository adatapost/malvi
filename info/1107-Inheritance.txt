Overriding the methods of java.lang.Object
===========================================

  1. int hashCode() - It returns the 'hash' of the data that an object currently represent. Here, the "Hash" is integer
     value which is generated by our own algorithm based upon the current state of the content of an object.

  2. boolean equals(Object obj) - It is used to compare the object's content.

  3. String toString() - Returns string representation of the object's content.


  NOTE: All above methods code and bahavior is to controlled by the developers and hence the logic/algo used in these
	methods might be different from one developer's perspective to another.

        But, most of the Java classes have overriden all or few methods of the java.lang.Object.

        
        The toString() method should be override to display the content of an object for the debug purpose.


Example:

Product.java
--------------


public class Product {
    private int id;
    private String name;

    //Constructors and getter/setters
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Product product = (Product) o;
        if (id != product.id) return false;
        return name!=null && name.equals(product.name);
    }
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (name == null ? 0 :  name.hashCode());
        return result;
    }
    @Override
    public String toString() {
        return id + "," + name;
    }
}

and the code in main to compare the objects of Product.

 Product p1 = new Product(10,"Pen");
 Product p2 = new Product(10,"Pen");      

 s.o.p(p1.hashCode() + " " + p2.hashCode() ); // First of all comment three methods code and see the result.
 if(p1.equals(p2))
   s.o.p("EQ");
 else 
   s.o.p("Not Eq");
  
 s.o.p(p1.toString());                                
 s.o.p(p2);            // The toString() will be called automatically when an object reference is contract by the
			// String context.


So, now and then, always override the hashCode(), equals() and toString() for the data or model classes. Classes specificially used to hold the data are also called "POJO - Plain Object Java Object" or "Entity" or "Model" classes or Beans classes.

The java.lang.Comparable<T> interface
=====================================

 To add object compare behavior for "sort", and "search" actions of Java's Collection Framework's APIs -- especially, we  will use the java.util.Arrays.sort() method.

 The java.util.Arrays.sort( array ) - method can sort objects of a type which has implemented the Comparable<T> interface.

 This interface has a single method named,

    int compareTo(T obj);  and it returns 0; if two objects are equals
                                  returns >0; if first object is greater than second and
                                  returns <0; if second is the greatest then first one.

Example:
 
public class Product implements Comparable<Product> {
  //TODO - as per orevious code
  
   @Override
   public int compareTo(Product o) {
       return id - o.id; // if(id==o.id) return 0;
                          // if(id>o.id) return 1;
                          // return -1;

       // return name.compareTo(o.name);
   }
}
code in main:

 Product []products = 
   {
     new Product(11,"Pencil"),
     .....
     .....
    };
 java.util.Arrays.sort(products);
 for(Product p : products)
   s.o.p(p);

 int []nos = {11,2,43,4,7-20};
 java.util.Arrays.sort(nos);
 for(int no: nos)
   s.o.p(no);

Example: Update Question bank example.

1. Create an implementation of Question interface
  
public class QuestionImpl implements Question { }

2. Create sub classes of QuestionImpl

public class SingleChoiceQuestion extends QuestionImpl { }
public class MultiChoiceQuestion extends QuestionImpl { }

 Override the "isCorrect" and "display" methods of QuestionImpl class.







